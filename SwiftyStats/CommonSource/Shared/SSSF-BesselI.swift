//
//  SSSpecialFunctions.swift
//  SwiftyStats
//
//  Created by Volker Thieme on 19.07.17.
//
/*
 Copyright (c) 2017 Volker Thieme
 
 GNU GPL 3+
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, version 3 of the License.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/*
 References:
 DiDonato,  A.    R.   and  Morris,  A.  H.   (1993)  ``Algorithm  708:
 Significant  Digit   Computation  of  the   Incomplete  Beta  Function
 Ratios.''  ACM Trans.  Math.  Softw. 18, 360-373.

 DiDonato,  A.  R.   and Morris,  A.  H.  (1986)  ``Computation of  the
 incomplete gamma function ratios and their inverse.'' ACM Trans. Math.
 Softw. 12, 377-393.
 
 Cody,  W.D. (1993).  ``ALGORITHM  715: SPECFUN  -  A Portable  FORTRAN
 Package  of   Special  Function   Routines  and  Test   Drivers''  ACM
 Trans. Math.  Softw. 19, 22-32.

 */

import Foundation
#if os(macOS) || os(iOS)
import os.log
#endif
/*                            i0.c
 *
 *    Modified Bessel function of order zero
 *
 *
 *
 * SYNOPSIS:
 *
 * double x, y, i0();
 *
 * y = i0( x );
 *
 *
 *
 * DESCRIPTION:
 *
 * Returns modified Bessel function of order zero of the
 * argument.
 *
 * The function is defined as i0(x) = j0( ix ).
 *
 * The range is partitioned into the two intervals [0,8] and
 * (8, infinity).  Chebyshev polynomial expansions are employed
 * in each interval.
 *
 *
 *
 * ACCURACY:
 *
 *                      Relative error:
 * arithmetic   domain     # trials      peak         rms
 *    DEC       0,30         6000       8.2e-17     1.9e-17
 *    IEEE      0,30        30000       5.8e-16     1.4e-16
 *
 */
/*                            i0e.c
 *
 *    Modified Bessel function of order zero,
 *    exponentially scaled
 *
 *
 *
 * SYNOPSIS:
 *
 * double x, y, i0e();
 *
 * y = i0e( x );
 *
 *
 *
 * DESCRIPTION:
 *
 * Returns exponentially scaled modified Bessel function
 * of order zero of the argument.
 *
 * The function is defined as i0e(x) = exp(-|x|) j0( ix ).
 *
 *
 *
 * ACCURACY:
 *
 *                      Relative error:
 * arithmetic   domain     # trials      peak         rms
 *    IEEE      0,30        30000       5.4e-16     1.2e-16
 * See i0().
 *
 */

/*                            i0.c        */


/*
 Cephes Math Library Release 2.8:  June, 2000
 Copyright 1984, 1987, 2000 by Stephen L. Moshier
 */


/* Chebyshev coefficients for exp(-x) I0(x)
 * in the interval [0,8].
 *
 * lim(x->0){ exp(-x) I0(x) } = 1.
 */

internal func besselAI0<FPT:  SSFloatingPoint & Codable>() -> [FPT] {
    let AI0Float: Array<Float> =
        [
            0.6767952744094760849952084881683910535897392707346183571934311043,-0.3046826723431983986825339182518464965134435122990618760037572348,0.1716209015222087753485835737755680776868622876553655323267683615,-0.09490109704804764442095730663485937438023650646502690832713624004,0.04930528423967070848777615794605307750830386731541098303582515117,-0.02373741480589946881556676634344807345704376179841689985342455435,0.01054646039459499831832250091128771148939978866459834740359490869,-0.00432430999505057594430499578753086899875885268954819060023788819,0.001639475616941335798418549814060924395609611164519648982735082426,-0.0005763755745385823658849378202604269935992204735049918585954150011,0.0001885028850958416557285147292165705095100732224157655269525521501,-0.00005754195010082103703976440562802510201842624876830946769311056167,0.00001644844807072889708931643359042528415792713047610114508729199746,-4.416738358458750563591215026355291922274809131673621896810370102e-6,1.117387539120103718152562646025675342753850274741581214593963691e-6,-2.670793853940611733914477441317822991237372013640008917431188304e-7,6.046995022541918949318740028757450255129193360431502543607821217e-8,-1.300025009986248042121747516731018532628140267152663827056300288e-8,2.659823724682386650347451528046225954844502596254268449163222727e-9,-5.189795601635262906655544022460986104251136091553205957002864601e-10,9.675809035373236912244047628139894301509041484127046812399541397e-11,-1.726826291441555707231872051712301533339542996181747071674773871e-11,2.9550526631296398346084060085292344836819351229470505640012252e-12,-4.856446783111929460897961860010054295850466221687054697364008938e-13,7.676185498604935616880994823349052483260773127486244169974967279e-14,-1.168533287799345168080359196048879689419370518227275986717283156e-14,1.715391285555133030606018151675785189283138834425715427805740808e-15,-2.431279846547954693594594118692584868622340018595427657440424606e-16,3.330794518822238097829387647239258124754271688526301667647911884e-17,-4.415341646479339379496802741262649738870433980439973298185638758e-18,            5.669178006921496157085681814598121100367998656673806069259516937e-19,-7.057100692457293367118071496685731079534524186523683553639152672e-20,8.524549418128700814067355545593299956965822534265589015292324362e-21,-1.000052890233411553628354632458321513126171689687699518256516193e-21,1.140326139699785946971274892384041120874288704943839619109418298e-22]
    let AI0Double: Array<Double> =
        [
            0.6767952744094760849952084881683910535897392707346183571934311043,-0.3046826723431983986825339182518464965134435122990618760037572348,0.1716209015222087753485835737755680776868622876553655323267683615,-0.09490109704804764442095730663485937438023650646502690832713624004,0.04930528423967070848777615794605307750830386731541098303582515117,-0.02373741480589946881556676634344807345704376179841689985342455435,0.01054646039459499831832250091128771148939978866459834740359490869,-0.00432430999505057594430499578753086899875885268954819060023788819,0.001639475616941335798418549814060924395609611164519648982735082426,-0.0005763755745385823658849378202604269935992204735049918585954150011,0.0001885028850958416557285147292165705095100732224157655269525521501,-0.00005754195010082103703976440562802510201842624876830946769311056167,0.00001644844807072889708931643359042528415792713047610114508729199746,-4.416738358458750563591215026355291922274809131673621896810370102e-6,1.117387539120103718152562646025675342753850274741581214593963691e-6,-2.670793853940611733914477441317822991237372013640008917431188304e-7,6.046995022541918949318740028757450255129193360431502543607821217e-8,-1.300025009986248042121747516731018532628140267152663827056300288e-8,2.659823724682386650347451528046225954844502596254268449163222727e-9,-5.189795601635262906655544022460986104251136091553205957002864601e-10,9.675809035373236912244047628139894301509041484127046812399541397e-11,-1.726826291441555707231872051712301533339542996181747071674773871e-11,2.9550526631296398346084060085292344836819351229470505640012252e-12,-4.856446783111929460897961860010054295850466221687054697364008938e-13,7.676185498604935616880994823349052483260773127486244169974967279e-14,-1.168533287799345168080359196048879689419370518227275986717283156e-14,1.715391285555133030606018151675785189283138834425715427805740808e-15,-2.431279846547954693594594118692584868622340018595427657440424606e-16,3.330794518822238097829387647239258124754271688526301667647911884e-17,-4.415341646479339379496802741262649738870433980439973298185638758e-18,            5.669178006921496157085681814598121100367998656673806069259516937e-19,-7.057100692457293367118071496685731079534524186523683553639152672e-20,8.524549418128700814067355545593299956965822534265589015292324362e-21,-1.000052890233411553628354632458321513126171689687699518256516193e-21,1.140326139699785946971274892384041120874288704943839619109418298e-22]
    #if arch(i386) || arch(x86_64)
    let AI0Float80: Array<Float80> = [
            0.6767952744094760849952084881683910535897392707346183571934311043,-0.3046826723431983986825339182518464965134435122990618760037572348,0.1716209015222087753485835737755680776868622876553655323267683615,-0.09490109704804764442095730663485937438023650646502690832713624004,0.04930528423967070848777615794605307750830386731541098303582515117,-0.02373741480589946881556676634344807345704376179841689985342455435,0.01054646039459499831832250091128771148939978866459834740359490869,-0.00432430999505057594430499578753086899875885268954819060023788819,0.001639475616941335798418549814060924395609611164519648982735082426,-0.0005763755745385823658849378202604269935992204735049918585954150011,0.0001885028850958416557285147292165705095100732224157655269525521501,-0.00005754195010082103703976440562802510201842624876830946769311056167,0.00001644844807072889708931643359042528415792713047610114508729199746,-4.416738358458750563591215026355291922274809131673621896810370102e-6,1.117387539120103718152562646025675342753850274741581214593963691e-6,-2.670793853940611733914477441317822991237372013640008917431188304e-7,6.046995022541918949318740028757450255129193360431502543607821217e-8,-1.300025009986248042121747516731018532628140267152663827056300288e-8,2.659823724682386650347451528046225954844502596254268449163222727e-9,-5.189795601635262906655544022460986104251136091553205957002864601e-10,9.675809035373236912244047628139894301509041484127046812399541397e-11,-1.726826291441555707231872051712301533339542996181747071674773871e-11,2.9550526631296398346084060085292344836819351229470505640012252e-12,-4.856446783111929460897961860010054295850466221687054697364008938e-13,7.676185498604935616880994823349052483260773127486244169974967279e-14,-1.168533287799345168080359196048879689419370518227275986717283156e-14,1.715391285555133030606018151675785189283138834425715427805740808e-15,-2.431279846547954693594594118692584868622340018595427657440424606e-16,3.330794518822238097829387647239258124754271688526301667647911884e-17,-4.415341646479339379496802741262649738870433980439973298185638758e-18,            5.669178006921496157085681814598121100367998656673806069259516937e-19,-7.057100692457293367118071496685731079534524186523683553639152672e-20,8.524549418128700814067355545593299956965822534265589015292324362e-21,-1.000052890233411553628354632458321513126171689687699518256516193e-21,1.140326139699785946971274892384041120874288704943839619109418298e-22]
    #endif
    switch FPT.self {
    case is Float.Type:
        let result = AI0Float.reversed() as Array<Float>
        return result as! Array<FPT>
    case is Double.Type:
        let result = AI0Double.reversed() as Array<Double>
        return result as! Array<FPT>
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = AI0Float80.reversed() as Array<Float80>
        return result as! Array<FPT>
        #endif
    default:
        let result = AI0Double.reversed() as Array<Double>
        return result as! Array<FPT>
    }
}

/* Chebyshev coefficients for exp(-x) sqrt(x) I0(x)
 * in the inverted interval [8,infinity].
 *
 * lim(x->inf){ exp(-x) sqrt(x) I0(x) } = 1/sqrt(2pi).
 */

internal func besselBI0<FPT:  SSFloatingPoint & Codable>() -> [FPT] {
    let BI0Float: Array<Float> = [
    -7.23318048787475395456E-18,
    -4.83050448594418207126E-18,
    4.46562142029675999901E-17,
    3.46122286769746109310E-17,
    -2.82762398051658348494E-16,
    -3.42548561967721913462E-16,
    1.77256013305652638360E-15,
    3.81168066935262242075E-15,
    -9.55484669882830764870E-15,
    -4.15056934728722208663E-14,
    1.54008621752140982691E-14,
    3.85277838274214270114E-13,
    7.18012445138366623367E-13,
    -1.79417853150680611778E-12,
    -1.32158118404477131188E-11,
    -3.14991652796324136454E-11,
    1.18891471078464383424E-11,
    4.94060238822496958910E-10,
    3.39623202570838634515E-9,
    2.26666899049817806459E-8,
    2.04891858946906374183E-7,
    2.89137052083475648297E-6,
    6.88975834691682398426E-5,
    3.36911647825569408990E-3,
    8.04490411014108831608E-1
]
    let BI0Double: Array<Double> = [
        -7.23318048787475395456E-18,
        -4.83050448594418207126E-18,
        4.46562142029675999901E-17,
        3.46122286769746109310E-17,
        -2.82762398051658348494E-16,
        -3.42548561967721913462E-16,
        1.77256013305652638360E-15,
        3.81168066935262242075E-15,
        -9.55484669882830764870E-15,
        -4.15056934728722208663E-14,
        1.54008621752140982691E-14,
        3.85277838274214270114E-13,
        7.18012445138366623367E-13,
        -1.79417853150680611778E-12,
        -1.32158118404477131188E-11,
        -3.14991652796324136454E-11,
        1.18891471078464383424E-11,
        4.94060238822496958910E-10,
        3.39623202570838634515E-9,
        2.26666899049817806459E-8,
        2.04891858946906374183E-7,
        2.89137052083475648297E-6,
        6.88975834691682398426E-5,
        3.36911647825569408990E-3,
        8.04490411014108831608E-1
    ]
    #if arch(i386) || arch(x86_64)
    let BI0Float80: Array<Float80> = [
        -7.23318048787475395456E-18,
        -4.83050448594418207126E-18,
        4.46562142029675999901E-17,
        3.46122286769746109310E-17,
        -2.82762398051658348494E-16,
        -3.42548561967721913462E-16,
        1.77256013305652638360E-15,
        3.81168066935262242075E-15,
        -9.55484669882830764870E-15,
        -4.15056934728722208663E-14,
        1.54008621752140982691E-14,
        3.85277838274214270114E-13,
        7.18012445138366623367E-13,
        -1.79417853150680611778E-12,
        -1.32158118404477131188E-11,
        -3.14991652796324136454E-11,
        1.18891471078464383424E-11,
        4.94060238822496958910E-10,
        3.39623202570838634515E-9,
        2.26666899049817806459E-8,
        2.04891858946906374183E-7,
        2.89137052083475648297E-6,
        6.88975834691682398426E-5,
        3.36911647825569408990E-3,
        8.04490411014108831608E-1
    ]
    #endif
    switch FPT.self {
    case is Float.Type:
        return BI0Float as! Array<FPT>
    case is Double.Type:
        return BI0Double as! Array<FPT>
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        return BI0Float80 as! Array<FPT>
        #endif
    default:
        return BI0Double as! Array<FPT>
    }
}
/// Returns the modified Bessel function of order zero I0(x)
/// - Parameter x: Argument
///
/// ###Note###
/// adapted from Cephes with kind permission
internal func besselI0<FPT:  SSFloatingPoint & Codable>(x: FPT) -> FPT {
    var y: FPT
    var xx: FPT
    if( x < 0 ) {
        xx = -x
    }
    else {
        xx = x
    }
    if( xx <= 8 ) {
        y = (xx / 2) - 2
        return( exp1(xx) * chebyshevEval(x: y, array: besselAI0(), n: 35 ) )
    }
    else {
        // TODO: H1F1?
        y = 32 / xx - 2
        return(  exp1(xx) * chebyshevEval( x: y, array: besselBI0(), n: 25 ) / xx.squareRoot() )
    }
    
}



/// Returns the exponentially scaled modified Bessel function of order zero I0(x) / exp(x)
/// - Parameter x: Argument
///
/// ###Note###
/// adapted from Cephes with kind permission
internal func besselI0e<FPT: SSFloatingPoint & Codable>(x: FPT) -> FPT {
    var y: FPT
    var xx: FPT
    
    if( x < 0 ) {
        xx = -x
    }
    else {
        xx = x
    }
    if( xx <= 8 ) {
        y = (xx / 2) - 2
        return ( chebyshevEval( x: y, array: besselAI0(), n: 30 ) )
    }
    else {
        return (  chebyshevEval( x: 32 / xx - 2, array: besselBI0(), n: 25 ) / xx.squareRoot() )
    }
}

/*                            i1.c
 *
 *    Modified Bessel function of order one
 *
 *
 *
 * SYNOPSIS:
 *
 * double x, y, i1();
 *
 * y = i1( x );
 *
 *
 *
 * DESCRIPTION:
 *
 * Returns modified Bessel function of order one of the
 * argument.
 *
 * The function is defined as i1(x) = -i j1( ix ).
 *
 * The range is partitioned into the two intervals [0,8] and
 * (8, infinity).  Chebyshev polynomial expansions are employed
 * in each interval.
 *
 *
 *
 * ACCURACY:
 *
 *                      Relative error:
 * arithmetic   domain     # trials      peak         rms
 *    DEC       0, 30        3400       1.2e-16     2.3e-17
 *    IEEE      0, 30       30000       1.9e-15     2.1e-16
 *
 *
 */
/*                            i1e.c
 *
 *    Modified Bessel function of order one,
 *    exponentially scaled
 *
 *
 *
 * SYNOPSIS:
 *
 * double x, y, i1e();
 *
 * y = i1e( x );
 *
 *
 *
 * DESCRIPTION:
 *
 * Returns exponentially scaled modified Bessel function
 * of order one of the argument.
 *
 * The function is defined as i1(x) = -i exp(-|x|) j1( ix ).
 *
 *
 *
 * ACCURACY:
 *
 *                      Relative error:
 * arithmetic   domain     # trials      peak         rms
 *    IEEE      0, 30       30000       2.0e-15     2.0e-16
 * See i1().
 *
 */

/*                            i1.c 2        */


/*
 Cephes Math Library Release 2.8:  June, 2000
 Copyright 1985, 1987, 2000 by Stephen L. Moshier
 */
/* Chebyshev coefficients for exp(-x) I1(x) / x
 * in the interval [0,8].
 *
 * lim(x->0){ exp(-x) I1(x) / x } = 1/2.
 */

fileprivate func besselAJ<FPT: SSFloatingPoint & Codable>() -> [FPT]  {
    let AJDouble: Array<Double> = [0.2525871864436336548233124571964114879514384915396264124333313714,-0.1764165183578340551526789776334498638230776134648609434323920627,0.1026436586898470953840931999994291327628243982948431799842646046,-0.05294598120809499142691944087293501726892704044015542196665059185,0.02472644903062651682828990259609131706630970457955008717677474633,-0.01056408489462619815575811076538720173415005635548185121753177124,0.004156422944312888156689651983986074646562935143390059687057655075,-0.001513572450631253148987310236797123617580838645220559986550837658,0.0005122859561685757728954354499381958282140407165643382360138492119,-0.0001617608158258967455879106177258168965193640451604239754577683109,0.00004781565107550054226378210135683341580057972225208907022258812279,-0.00001327316365603943582791098647061500020543956226177170101989686511,3.470251308137678476736071702566707601405807095961065207878164815e-6,-8.568720264695454740655907532870622464170767051491202049244267168e-7,2.003294753552135262286044517365924568290795288583962289173494072e-7,-4.445059128796328080653860549987557647961755030687383369054834496e-8,9.381537386495771783881787014225373467948789835848716865160790132e-9,-1.88724975172282928790400621719487808207989255765493136229660782e-9,3.625590281552117037007865031691067275643782889354492528109980005e-10,-6.663489723502027742230939645889366037648136308946430941349317499e-11,1.173618629889090163082187907743118566985029475923357559141677842e-11,-1.983974397764943715199084224972104686253016521226168800698347468e-12,3.223793365945574709813381587566986543286111893721934572006362421e-13,-5.04218550472791168710670430837101108162285093615326621323562098e-14,7.60068429473540693407383230461181063126722911990783578371510546e-15,-1.105596947735386308025532710021758168974219087635168030719050352e-15,1.553631957736200468917456286371163838826796684401737292250237817e-16,-2.111421214358166078238501961311155441104928961095190790051541529e-17,2.777914112761046370485212211682875466222690298860262070572987648e-18]
    let AJFloat: Array<Float> = [0.2525871864436336548233124571964114879514384915396264124333313714,-0.1764165183578340551526789776334498638230776134648609434323920627,0.1026436586898470953840931999994291327628243982948431799842646046,-0.05294598120809499142691944087293501726892704044015542196665059185,0.02472644903062651682828990259609131706630970457955008717677474633,-0.01056408489462619815575811076538720173415005635548185121753177124,0.004156422944312888156689651983986074646562935143390059687057655075,-0.001513572450631253148987310236797123617580838645220559986550837658,0.0005122859561685757728954354499381958282140407165643382360138492119,-0.0001617608158258967455879106177258168965193640451604239754577683109,0.00004781565107550054226378210135683341580057972225208907022258812279,-0.00001327316365603943582791098647061500020543956226177170101989686511,3.470251308137678476736071702566707601405807095961065207878164815e-6,-8.568720264695454740655907532870622464170767051491202049244267168e-7,2.003294753552135262286044517365924568290795288583962289173494072e-7,-4.445059128796328080653860549987557647961755030687383369054834496e-8,9.381537386495771783881787014225373467948789835848716865160790132e-9,-1.88724975172282928790400621719487808207989255765493136229660782e-9,3.625590281552117037007865031691067275643782889354492528109980005e-10,-6.663489723502027742230939645889366037648136308946430941349317499e-11,1.173618629889090163082187907743118566985029475923357559141677842e-11,-1.983974397764943715199084224972104686253016521226168800698347468e-12,3.223793365945574709813381587566986543286111893721934572006362421e-13,-5.04218550472791168710670430837101108162285093615326621323562098e-14,7.60068429473540693407383230461181063126722911990783578371510546e-15,-1.105596947735386308025532710021758168974219087635168030719050352e-15,1.553631957736200468917456286371163838826796684401737292250237817e-16,-2.111421214358166078238501961311155441104928961095190790051541529e-17,2.777914112761046370485212211682875466222690298860262070572987648e-18]
    #if arch(i386) || arch(x86_64)
    let AJFloat80: Array<Float80> = [0.2525871864436336548233124571964114879514384915396264124333313714,-0.1764165183578340551526789776334498638230776134648609434323920627,0.1026436586898470953840931999994291327628243982948431799842646046,-0.05294598120809499142691944087293501726892704044015542196665059185,0.02472644903062651682828990259609131706630970457955008717677474633,-0.01056408489462619815575811076538720173415005635548185121753177124,0.004156422944312888156689651983986074646562935143390059687057655075,-0.001513572450631253148987310236797123617580838645220559986550837658,0.0005122859561685757728954354499381958282140407165643382360138492119,-0.0001617608158258967455879106177258168965193640451604239754577683109,0.00004781565107550054226378210135683341580057972225208907022258812279,-0.00001327316365603943582791098647061500020543956226177170101989686511,3.470251308137678476736071702566707601405807095961065207878164815e-6,-8.568720264695454740655907532870622464170767051491202049244267168e-7,2.003294753552135262286044517365924568290795288583962289173494072e-7,-4.445059128796328080653860549987557647961755030687383369054834496e-8,9.381537386495771783881787014225373467948789835848716865160790132e-9,-1.88724975172282928790400621719487808207989255765493136229660782e-9,3.625590281552117037007865031691067275643782889354492528109980005e-10,-6.663489723502027742230939645889366037648136308946430941349317499e-11,1.173618629889090163082187907743118566985029475923357559141677842e-11,-1.983974397764943715199084224972104686253016521226168800698347468e-12,3.223793365945574709813381587566986543286111893721934572006362421e-13,-5.04218550472791168710670430837101108162285093615326621323562098e-14,7.60068429473540693407383230461181063126722911990783578371510546e-15,-1.105596947735386308025532710021758168974219087635168030719050352e-15,1.553631957736200468917456286371163838826796684401737292250237817e-16,-2.111421214358166078238501961311155441104928961095190790051541529e-17,2.777914112761046370485212211682875466222690298860262070572987648e-18]
    #endif
    //    [
//    2.77791411276104639959E-18,
//    -2.11142121435816608115E-17,
//    1.55363195773620046921E-16,
//    -1.10559694773538630805E-15,
//    7.60068429473540693410E-15,
//    -5.04218550472791168711E-14,
//    3.22379336594557470981E-13,
//    -1.98397439776494371520E-12,
//    1.17361862988909016308E-11,
//    -6.66348972350202774223E-11,
//    3.62559028155211703701E-10,
//    -1.88724975172282928790E-9,
//    9.38153738649577178388E-9,
//    -4.44505912879632808065E-8,
//    2.00329475355213526229E-7,
//    -8.56872026469545474066E-7,
//    3.47025130813767847674E-6,
//    -1.32731636560394358279E-5,
//    4.78156510755005422638E-5,
//    -1.61760815825896745588E-4,
//    5.12285956168575772895E-4,
//    -1.51357245063125314899E-3,
//    4.15642294431288815669E-3,
//    -1.05640848946261981558E-2,
//    2.47264490306265168283E-2,
//    -5.29459812080949914269E-2,
//    1.02643658689847095384E-1,
//    -1.76416518357834055153E-1,
//    2.52587186443633654823E-1
//]
    switch FPT.self {
    case is Float.Type:
        let result = AJFloat.reversed() as Array<Float>
        return result as! Array<FPT>
    case is Double.Type:
        let result = AJDouble.reversed() as Array<Double>
        return result as! Array<FPT>
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = AJFloat80.reversed() as Array<Float80>
        return result as! Array<FPT>
        #endif
    default:
        let result = AJDouble.reversed() as Array<Double>
        return result as! Array<FPT>
    }
}
/*                            i1.c    */

/* Chebyshev coefficients for exp(-x) sqrt(x) I1(x)
 * in the inverted interval [8,infinity].
 *
 * lim(x->inf){ exp(-x) sqrt(x) I1(x) } = 1/sqrt(2pi).
 */


fileprivate func besselBJ<FPT: SSFloatingPoint & Codable>() -> [FPT] {
    let BJFloat: Array<Float> =  [
    7.51729631084210481353E-18,
    4.41434832307170791151E-18,
    -4.65030536848935832153E-17,
    -3.20952592199342395980E-17,
    2.96262899764595013876E-16,
    3.30820231092092828324E-16,
    -1.88035477551078244854E-15,
    -3.81440307243700780478E-15,
    1.04202769841288027642E-14,
    4.27244001671195135429E-14,
    -2.10154184277266431302E-14,
    -4.08355111109219731823E-13,
    -7.19855177624590851209E-13,
    2.03562854414708950722E-12,
    1.41258074366137813316E-11,
    3.25260358301548823856E-11,
    -1.89749581235054123450E-11,
    -5.58974346219658380687E-10,
    -3.83538038596423702205E-9,
    -2.63146884688951950684E-8,
    -2.51223623787020892529E-7,
    -3.88256480887769039346E-6,
    -1.10588938762623716291E-4,
    -9.76109749136146840777E-3,
    7.78576235018280120474E-1
    ]
    let BJDouble: Array<Double> =  [
        7.51729631084210481353E-18,
        4.41434832307170791151E-18,
        -4.65030536848935832153E-17,
        -3.20952592199342395980E-17,
        2.96262899764595013876E-16,
        3.30820231092092828324E-16,
        -1.88035477551078244854E-15,
        -3.81440307243700780478E-15,
        1.04202769841288027642E-14,
        4.27244001671195135429E-14,
        -2.10154184277266431302E-14,
        -4.08355111109219731823E-13,
        -7.19855177624590851209E-13,
        2.03562854414708950722E-12,
        1.41258074366137813316E-11,
        3.25260358301548823856E-11,
        -1.89749581235054123450E-11,
        -5.58974346219658380687E-10,
        -3.83538038596423702205E-9,
        -2.63146884688951950684E-8,
        -2.51223623787020892529E-7,
        -3.88256480887769039346E-6,
        -1.10588938762623716291E-4,
        -9.76109749136146840777E-3,
        7.78576235018280120474E-1
    ]
    #if arch(i386) || arch(x86_64)
    let BJFloat80: Array<Float80> =  [
        7.51729631084210481353E-18,
        4.41434832307170791151E-18,
        -4.65030536848935832153E-17,
        -3.20952592199342395980E-17,
        2.96262899764595013876E-16,
        3.30820231092092828324E-16,
        -1.88035477551078244854E-15,
        -3.81440307243700780478E-15,
        1.04202769841288027642E-14,
        4.27244001671195135429E-14,
        -2.10154184277266431302E-14,
        -4.08355111109219731823E-13,
        -7.19855177624590851209E-13,
        2.03562854414708950722E-12,
        1.41258074366137813316E-11,
        3.25260358301548823856E-11,
        -1.89749581235054123450E-11,
        -5.58974346219658380687E-10,
        -3.83538038596423702205E-9,
        -2.63146884688951950684E-8,
        -2.51223623787020892529E-7,
        -3.88256480887769039346E-6,
        -1.10588938762623716291E-4,
        -9.76109749136146840777E-3,
        7.78576235018280120474E-1
    ]
    #endif
    switch FPT.self {
    case is Float.Type:
        let result = BJFloat.reversed() as Array<Float>
        return result as! Array<FPT>
    case is Double.Type:
        let result = BJDouble.reversed() as Array<Double>
        return result as! Array<FPT>
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = BJFloat80.reversed() as Array<Float80>
        return result as! Array<FPT>
        #endif
    default:
        let result = BJDouble.reversed() as Array<Double>
        return result as! Array<FPT>
    }
}

/// Returns the modified Bessel function of order one I1(x)
/// - Parameter x: Argument
///
/// ###Note###
/// adapted from Cephes with kind permission
internal func besselI1<FPT: SSFloatingPoint & Codable>(x: FPT) -> FPT {
    var y, z: FPT
    z = abs(x)
    if( z <= 8 ) {
        y = (z / 2) - 2
        z = chebyshevEval(x: y, array: besselAJ(), n: 29 ) * z * exp1(z)
    }
    else {
        z = exp1(z) * chebyshevEval(x: 32 / z - 2, array: besselBJ(), n: 25 ) / sqrt(z)
    }
    if( x < 0 ) {
        z = -z
    }
    return z
}

/*                            i1e()    */
/// Returns the exponentially scaled modified Bessel function of order one I1(x)
/// - Parameter x: Argument
///
/// ###Note###
/// adapted from Cephes with kind permission
internal func besselI1e<FPT: SSFloatingPoint & Codable>(x: FPT) -> FPT {
    var y, z: FPT
    
    z = abs(x)
    
    if( z <= 8 ) {
        y = (z / 2) - 2
        z = chebyshevEval(x: y, array: besselAJ(), n: 29 ) * z
    }
    else {
        z = chebyshevEval( x: 32 / z - 2,array: besselBJ(), n: 25 ) / sqrt(z)
    }
    if( x < 0 ) {
        z = -z
    }
    return z
}
/*                            iv.c
 *
 *    Modified Bessel function of noninteger order
 *
 *
 *
 * SYNOPSIS:
 *
 * double v, x, y, iv();
 *
 * y = iv( v, x );
 *
 *
 *
 * DESCRIPTION:
 *
 * Returns modified Bessel function of order v of the
 * argument.  If x is negative, v must be integer valued.
 *
 * The function is defined as Iv(x) = Jv( ix ).  It is
 * here computed in terms of the confluent hypergeometric
 * function, according to the formula
 *
 *              v  -x
 * Iv(x) = (x/2)  e   hyperg( v+0.5, 2v+1, 2x ) / gamma(v+1)
 *
 * If v is a negative integer, then v is replaced by -v.
 *
 *
 * ACCURACY:
 *
 * Tested at random points (v, x), with v between 0 and
 * 30, x between 0 and 28.
 *                      Relative error:
 * arithmetic   domain     # trials      peak         rms
 *    DEC       0,30          2000      3.1e-15     5.4e-16
 *    IEEE      0,30         10000      1.7e-14     2.7e-15
 *
 *
 * See also hyperg.c.
 *
 Cephes Math Library Release 2.8:  June, 2000
 Copyright 1984, 1987, 1988, 2000 by Stephen L. Moshier
 */




/// Returns the modified Bessel function of non-integer order I(v, x)
/// - Parameter x: Argument
/// - Preconditon: if x < 0, v must be an integer
/// ###NOTE###
///
/// Accuracy is diminished if v is near a negative integer.
internal func besselI<FPT: SSFloatingPoint & Codable>(order v: FPT, x: FPT) -> FPT {
    var sign: FPT
    var t, ax: FPT
    var vv: FPT = v
    /* If v is a negative integer, invoke symmetry */
    t = floor(v)
    if( vv < 0 ) {
        if( t == vv ) {
            vv = -vv    /* symmetry */
            t = -t
        }
    }
    /* If x is negative, require v to be an integer */
    sign = 1
    if( x < 0 ) {
        if( t != vv ) {
            #if os(macOS) || os(iOS)
            if #available(macOS 10.12, iOS 10, *) {
                os_log("BesselI: for x < 0, order must be an integer", log: log_stat, type: .error)
            }
            #endif
            printError("BesselI: for x < 0, order must be an integer in the real plane")
            return 0
        }
        if( vv != 2 * floor(vv / 2) ) {
            sign = -1
        }
    }
    
    /* Avoid logarithm singularity */
    if( x == 0 ) {
        if( vv == 0 ) {
            return( 1 )
        }
        if( vv < 0 ) {
            #if os(macOS) || os(iOS)
            if #available(macOS 10.12, iOS 10, *) {
                os_log("BesselI: overflow", log: log_stat, type: .error)
            }
            #endif
            printError("BesselI: overflow")
            return FPT.infinity
        }
        else {
            return 0
        }
    }
    
    ax = abs(x)
    t = vv * log1( FPT.half * ax )  -  x
    t = sign * exp1(t) / tgamma1( vv + 1 )
    ax = vv + FPT.half
    return t * hypergeometric1F1(a: ax, b: 2 * ax, x: 2 * x)
}


