//
//  Created by VT on 06.10.18.
//  Copyright Â© 2018 strike65. All rights reserved.
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//  

import Foundation

extension SSSpecialFunctions {
    
    /// Returns the Bessel function of Order zero (long)
    ///
    /// - Parameter x: x
    /// - Returns: BesselJ1
    internal static func besselJ0l<T: SSFloatingPoint>(x: T) -> T {
        var xx: T
        var ans: T = 0
        var num: Array<T>
        var denom: Array<T>
        var z: T
        var y: T
        // 1. root of BesselJ_0
        let r1: T =  Helpers.makeFP(5.783185962946784521175995758455807035071441806423685587087123716)
        // 2. root of BesselJ_0
        let r2: T =  Helpers.makeFP(30.47126234366208639907816317502275584842083370855398235487607831)
        // 3. root of BesselJ_0
        //    let r3: T =  Helpers.makeFP(74.88700679069518344488904131013680827481090718732218910531915139)
        // 4. root of BesselJ_0
        //    let r4: T =  Helpers.makeFP(139.0402844264598490015914235158766468891258570074069554076670420)
        if x < 0 {
            xx = -x
        }
        else {
            xx = x
        }
        if xx <  Helpers.makeFP(1E-12) {
            return 1
        }
        if xx < 8 {
            z = (xx * xx - r1) * (xx * xx - r2)
            y = xx * xx
            num = cn0_8_N()
            denom = cn0_8_D()
            ans = Helper.polyeval(x: y, coef: num, n: 13) / Helper.polyeval(x: y, coef: denom, n: 17) * z
        }
        else if xx >= 8 && xx < 16 {
            z = (xx * xx - r1) * (xx * xx - r2)
            num = cn8_16_N()
            denom = cn8_16_D()
            ans = Helper.polyeval(x: xx, coef: num, n: 23) / Helper.polyeval(x: xx, coef: denom, n: 23) * z
        }
        return ans
    }
}
/*
 - approximation of BesselJ_0 for real x by Pn(x)/Qm(x)
 J0(x) = Pn(x*x) / Qm(x*x) * z
 z = (x * x - r1^2) * (x * x - r2^2)
 r1 and r1: first and second root of J0 respectively
 - intervals: [0,8),[8, inf)
 - a minimax approximation is used
 */
fileprivate func cn0_8_N<T: SSFloatingPoint>() -> Array<T> {
    
    let dataf: Array<Float> = [
        -0.1042760860528045961598096566456139233407365003687755466550067440e-37,
        0.9883073476005803284087377548988359897508731053312637426948740313e-34,
        -0.4241826820655420027891532425827696158168217881708149347592543574e-30,
        0.1084780541990899102932307085546813365785558141276308003510217112e-26,
        -0.1832237353110564587996575399843465156107577149989671627495016495e-23,
        0.2143762574718314365746776397119075235009251391244962984139979960e-20,
        -0.1774650376703576035221496398503438827987874947742277011331027141e-17,
        0.1044203786104258815516094072477037212193316860932083567199310406e-14,
        -0.4329756836848846719468048594534530371392484893720848364127351753e-12,
        0.1237638183387205856257248799802418827741298393999234625830893725e-9,
        -0.2344946021427412284320222746905965703996183504461792311191140934e-7,
        0.2754261774856913269794638866075949201138259637766603927391426538e-5,
        -0.1771597004978371122097231391228827328888829314236388803125793922e-3,
        0.4633593084547741564042791525430013563897302420851678460310150993e-2
        
    ]
    let datad: Array<Double> = [
        -0.1042760860528045961598096566456139233407365003687755466550067440e-37,
        0.9883073476005803284087377548988359897508731053312637426948740313e-34,
        -0.4241826820655420027891532425827696158168217881708149347592543574e-30,
        0.1084780541990899102932307085546813365785558141276308003510217112e-26,
        -0.1832237353110564587996575399843465156107577149989671627495016495e-23,
        0.2143762574718314365746776397119075235009251391244962984139979960e-20,
        -0.1774650376703576035221496398503438827987874947742277011331027141e-17,
        0.1044203786104258815516094072477037212193316860932083567199310406e-14,
        -0.4329756836848846719468048594534530371392484893720848364127351753e-12,
        0.1237638183387205856257248799802418827741298393999234625830893725e-9,
        -0.2344946021427412284320222746905965703996183504461792311191140934e-7,
        0.2754261774856913269794638866075949201138259637766603927391426538e-5,
        -0.1771597004978371122097231391228827328888829314236388803125793922e-3,
        0.4633593084547741564042791525430013563897302420851678460310150993e-2
    ]
    #if arch(i386) || arch(x86_64)
    let datal: Array<Float80> = [
        -0.1042760860528045961598096566456139233407365003687755466550067440e-37,
        0.9883073476005803284087377548988359897508731053312637426948740313e-34,
        -0.4241826820655420027891532425827696158168217881708149347592543574e-30,
        0.1084780541990899102932307085546813365785558141276308003510217112e-26,
        -0.1832237353110564587996575399843465156107577149989671627495016495e-23,
        0.2143762574718314365746776397119075235009251391244962984139979960e-20,
        -0.1774650376703576035221496398503438827987874947742277011331027141e-17,
        0.1044203786104258815516094072477037212193316860932083567199310406e-14,
        -0.4329756836848846719468048594534530371392484893720848364127351753e-12,
        0.1237638183387205856257248799802418827741298393999234625830893725e-9,
        -0.2344946021427412284320222746905965703996183504461792311191140934e-7,
        0.2754261774856913269794638866075949201138259637766603927391426538e-5,
        -0.1771597004978371122097231391228827328888829314236388803125793922e-3,
        0.4633593084547741564042791525430013563897302420851678460310150993e-2
    ]
    #endif
    switch T.self {
    case is Float.Type:
        let result = dataf as Array<Float>
        return result as! Array<T>
    case is Double.Type:
        let result = datad as Array<Double>
        return result as! Array<T>
        //        return BI0Double as! Array<FPT>
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = datal as Array<Float80>
        return result as! Array<T>
        //        return BI0Float80 as! Array<FPT>
        #endif
    default:
        return datad as! Array<T>
    }
}
fileprivate func cn0_8_D<T: SSFloatingPoint>() -> Array<T> {
    
    let dataf: Array<Float> = [
        0,
        0,
        0,
        0,
        0,
        0.4032924533091076863850751708390087435996789112209675825500689915e-35,
        0.8827570002344507249050057539346886185573621671447537772199354441e-32,
        0.1687196793966155781636664487107887735368883942035310371970830558e-28,
        0.2836141465616407043501031036056320304936469834176952927528386807e-25,
        0.4197748049709742623181926955251996756800574150915400286126854109e-22,
        0.5447997776651851631672430992618625089086791817506163961808080768e-19,
        0.6141609142998152029613393614291903392177007154511512487688094743e-16,
        0.5919793299562684435271279555369011265886748034040139235662329081e-13,
        0.4761307308090331432564465889453463633454300920469234092132579548e-10,
        0.3076931427360967915302601459316876647709470850504711635913793148e-7,
        0.1501389346069235086342578709785475224149273187468837974691956147e-4,
        0.4926458296039591258190322221156617876494892680480357238844969804e-2,
        0.8165362988000193115784843753257035039955161519872228428920495647e0
    ]
    let datad: Array<Double> = [
        0.2559062638874785216451749712917145035094758034105141186901917601e-53,
        0.2524087202508629483210627645078049502883961185937430913921913230e-49,
        0.1354992948110231667472920783310803742812424695417222208541374832e-45,
        0.5200746536600402014301414686560518962811764041511240233133997062e-42,
        0.1584141899711881938472518565376710144482361985100743227836032130e-38,
        0.4032924533091076863850751708390087435996789112209675825500689915e-35,
        0.8827570002344507249050057539346886185573621671447537772199354441e-32,
        0.1687196793966155781636664487107887735368883942035310371970830558e-28,
        0.2836141465616407043501031036056320304936469834176952927528386807e-25,
        0.4197748049709742623181926955251996756800574150915400286126854109e-22,
        0.5447997776651851631672430992618625089086791817506163961808080768e-19,
        0.6141609142998152029613393614291903392177007154511512487688094743e-16,
        0.5919793299562684435271279555369011265886748034040139235662329081e-13,
        0.4761307308090331432564465889453463633454300920469234092132579548e-10,
        0.3076931427360967915302601459316876647709470850504711635913793148e-7,
        0.1501389346069235086342578709785475224149273187468837974691956147e-4,
        0.4926458296039591258190322221156617876494892680480357238844969804e-2,
        0.8165362988000193115784843753257035039955161519872228428920495647e0
    ]
    #if arch(i386) || arch(x86_64)
    let datal: Array<Float80> = [
        0.2559062638874785216451749712917145035094758034105141186901917601e-53,
        0.2524087202508629483210627645078049502883961185937430913921913230e-49,
        0.1354992948110231667472920783310803742812424695417222208541374832e-45,
        0.5200746536600402014301414686560518962811764041511240233133997062e-42,
        0.1584141899711881938472518565376710144482361985100743227836032130e-38,
        0.4032924533091076863850751708390087435996789112209675825500689915e-35,
        0.8827570002344507249050057539346886185573621671447537772199354441e-32,
        0.1687196793966155781636664487107887735368883942035310371970830558e-28,
        0.2836141465616407043501031036056320304936469834176952927528386807e-25,
        0.4197748049709742623181926955251996756800574150915400286126854109e-22,
        0.5447997776651851631672430992618625089086791817506163961808080768e-19,
        0.6141609142998152029613393614291903392177007154511512487688094743e-16,
        0.5919793299562684435271279555369011265886748034040139235662329081e-13,
        0.4761307308090331432564465889453463633454300920469234092132579548e-10,
        0.3076931427360967915302601459316876647709470850504711635913793148e-7,
        0.1501389346069235086342578709785475224149273187468837974691956147e-4,
        0.4926458296039591258190322221156617876494892680480357238844969804e-2,
        0.8165362988000193115784843753257035039955161519872228428920495647e0
    ]
    #endif
    switch T.self {
    case is Float.Type:
        let result = dataf as Array<Float>
        return result as! Array<T>
    case is Double.Type:
        let result = datad as Array<Double>
        return result as! Array<T>
        //        return BI0Double as! Array<FPT>
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = datal as Array<Float80>
        return result as! Array<T>
        //        return BI0Float80 as! Array<FPT>
        #endif
    default:
        return datad as! Array<T>
    }
}

fileprivate func cn8_16_N<T: SSFloatingPoint>() -> Array<T> {
    
    let dataf: Array<Float> = [
        0,
        -0.4448474230623964537834678705599974145476766357539978516398289357e-36,
        0.5990287588516660580718073033005078904118547560066909205779949170e-34,
        -0.3928460474363339010082214228012529361539636075901920071736069637e-32,
        0.850386452143478733455850419563971825283154083878553891089455901e-31,
        0.484719025294474607331013917065265596183972251922845226934233846e-29,
        -0.3453902331879421306931009665374021057132539691321329109069122572e-27,
        0.296650856643597752185285384754289912962412695332523681023509871e-26,
        0.3870631607452753364207775887036235330234056193756545446292629989e-24,
        -0.1164399002024766817642549165395939327326262415496780947455242322e-22,
        -0.1658462391844062834537780690837654549968416888845651634980682920e-21,
        0.1229367013895001646119336026683042286625128745489406136047855466e-19,
        -0.47335136338578550366074158684589967005223525940243801696807904e-19,
        -0.693966811183317335638224816246793495864617197955049942212804518e-17,
        0.95925242036501501135727754603927406463674985595512504556925149e-16,
        0.217922710642226416565687069296586249485620511417840460051865788e-14,
        -0.527368605463936493946825198660481338973413936643501634937433558e-13,
        -0.294984017400535746000622346314307160455996792281984519099337108e-12,
        0.1505572303438296204200538306359396732735754293141274258674960778e-10,
        -0.240317990168238991961573479557033252611668684056843479479387485e-10,
        -0.2247176092672867372533154192805425391751229958379774188976533224e-8,
        0.1260307827643906538696143182512283072136228948915832627635111920e-7,
        0.1378853200092787763377952921674646483748344129909503821692779373e-6,
        -0.1122352350930623017252654407326534796594002557737504025857474712e-5
        
    ]
    let datad: Array<Double> = [
        0.1356186190782079410559742501328286478429967918063472029719323831e-38,
        -0.4448474230623964537834678705599974145476766357539978516398289357e-36,
        0.5990287588516660580718073033005078904118547560066909205779949170e-34,
        -0.3928460474363339010082214228012529361539636075901920071736069637e-32,
        0.850386452143478733455850419563971825283154083878553891089455901e-31,
        0.484719025294474607331013917065265596183972251922845226934233846e-29,
        -0.3453902331879421306931009665374021057132539691321329109069122572e-27,
        0.296650856643597752185285384754289912962412695332523681023509871e-26,
        0.3870631607452753364207775887036235330234056193756545446292629989e-24,
        -0.1164399002024766817642549165395939327326262415496780947455242322e-22,
        -0.1658462391844062834537780690837654549968416888845651634980682920e-21,
        0.1229367013895001646119336026683042286625128745489406136047855466e-19,
        -0.47335136338578550366074158684589967005223525940243801696807904e-19,
        -0.693966811183317335638224816246793495864617197955049942212804518e-17,
        0.95925242036501501135727754603927406463674985595512504556925149e-16,
        0.217922710642226416565687069296586249485620511417840460051865788e-14,
        -0.527368605463936493946825198660481338973413936643501634937433558e-13,
        -0.294984017400535746000622346314307160455996792281984519099337108e-12,
        0.1505572303438296204200538306359396732735754293141274258674960778e-10,
        -0.240317990168238991961573479557033252611668684056843479479387485e-10,
        -0.2247176092672867372533154192805425391751229958379774188976533224e-8,
        0.1260307827643906538696143182512283072136228948915832627635111920e-7,
        0.1378853200092787763377952921674646483748344129909503821692779373e-6,
        -0.1122352350930623017252654407326534796594002557737504025857474712e-5
    ]
    #if arch(i386) || arch(x86_64)
    let datal: Array<Float80> = [
        0.1356186190782079410559742501328286478429967918063472029719323831e-38,
        -0.4448474230623964537834678705599974145476766357539978516398289357e-36,
        0.5990287588516660580718073033005078904118547560066909205779949170e-34,
        -0.3928460474363339010082214228012529361539636075901920071736069637e-32,
        0.850386452143478733455850419563971825283154083878553891089455901e-31,
        0.484719025294474607331013917065265596183972251922845226934233846e-29,
        -0.3453902331879421306931009665374021057132539691321329109069122572e-27,
        0.296650856643597752185285384754289912962412695332523681023509871e-26,
        0.3870631607452753364207775887036235330234056193756545446292629989e-24,
        -0.1164399002024766817642549165395939327326262415496780947455242322e-22,
        -0.1658462391844062834537780690837654549968416888845651634980682920e-21,
        0.1229367013895001646119336026683042286625128745489406136047855466e-19,
        -0.47335136338578550366074158684589967005223525940243801696807904e-19,
        -0.693966811183317335638224816246793495864617197955049942212804518e-17,
        0.95925242036501501135727754603927406463674985595512504556925149e-16,
        0.217922710642226416565687069296586249485620511417840460051865788e-14,
        -0.527368605463936493946825198660481338973413936643501634937433558e-13,
        -0.294984017400535746000622346314307160455996792281984519099337108e-12,
        0.1505572303438296204200538306359396732735754293141274258674960778e-10,
        -0.240317990168238991961573479557033252611668684056843479479387485e-10,
        -0.2247176092672867372533154192805425391751229958379774188976533224e-8,
        0.1260307827643906538696143182512283072136228948915832627635111920e-7,
        0.1378853200092787763377952921674646483748344129909503821692779373e-6,
        -0.1122352350930623017252654407326534796594002557737504025857474712e-5
    ]
    #endif
    switch T.self {
    case is Float.Type:
        let result = dataf as Array<Float>
        return result as! Array<T>
    case is Double.Type:
        let result = datad as Array<Double>
        return result as! Array<T>
        //        return BI0Double as! Array<FPT>
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = datal as Array<Float80>
        return result as! Array<T>
        //        return BI0Float80 as! Array<FPT>
        #endif
    default:
        return datad as! Array<T>
    }
}

fileprivate func cn8_16_D<T: SSFloatingPoint>() -> Array<T> {
    
    let dataf: Array<Float> = [
        0.1754548260022958923959603369577968267462845423320418756267262802e-35,
        -0.4608364598176219718151206437347455341103981295742782057250209733e-33,
        0.7079054045963260779141640330636872304102851676801983557312694876e-31,
        -0.7781631899528993387006875708203509838506301245699222425345556459e-29,
        0.6804297867815841183329652889601631030481806580503377730882599600e-27,
        -0.4965605835195042413496366563593034829779242702384290824681445749e-25,
        0.3130291114221916384273307743194354318767438792905507152466661838e-23,
        -0.1740275932414278002619513247798749597906384645319782594318398236e-21,
        0.8669230088497365390159728088188150944248001815877397624099132185e-20,
        -0.3911625416050804238354112382963341084823051510711870768179902620e-18,
        0.1611172692006925013670813914974406751815280495207733753460419987e-16,
        -0.6093411480425712875171729893334649078211675370998439760662846572e-15,
        0.2121775003403032437753105067165702721358577107033820261162982540e-13,
        -0.6821560506321979966173076246059046768816094011635155524484159723e-12,
        0.2021060336521718732176665128650804990733287058577029559997896279e-10,
        -0.5523392831905661048521595556152534012397802439827377264015848814e-9,
        0.1380850457931831006348459440185281075090561932409044150848563190e-7,
        -0.3159592541226325729252114041404932172476825093241571022685558030e-6,
        0.6479345480485067400604268470413179205856053951764350285488774818e-5,
        -0.1195640987219310834630997134850124765339230561789599559118469027e-3,
        0.1878303048821821104213841688772755214421718592578708928069060912e-2,
        -0.2572634276609983812549374320149446086487394841752315971991333795e-1,
        0.2530013013837696018076453023459406710228747813264849235890169565e0,
        -0.2059367925298157081333743043961523110589638474477639670763918819e1
    ]
    let datad: Array<Double> = [
        0.1754548260022958923959603369577968267462845423320418756267262802e-35,
        -0.4608364598176219718151206437347455341103981295742782057250209733e-33,
        0.7079054045963260779141640330636872304102851676801983557312694876e-31,
        -0.7781631899528993387006875708203509838506301245699222425345556459e-29,
        0.6804297867815841183329652889601631030481806580503377730882599600e-27,
        -0.4965605835195042413496366563593034829779242702384290824681445749e-25,
        0.3130291114221916384273307743194354318767438792905507152466661838e-23,
        -0.1740275932414278002619513247798749597906384645319782594318398236e-21,
        0.8669230088497365390159728088188150944248001815877397624099132185e-20,
        -0.3911625416050804238354112382963341084823051510711870768179902620e-18,
        0.1611172692006925013670813914974406751815280495207733753460419987e-16,
        -0.6093411480425712875171729893334649078211675370998439760662846572e-15,
        0.2121775003403032437753105067165702721358577107033820261162982540e-13,
        -0.6821560506321979966173076246059046768816094011635155524484159723e-12,
        0.2021060336521718732176665128650804990733287058577029559997896279e-10,
        -0.5523392831905661048521595556152534012397802439827377264015848814e-9,
        0.1380850457931831006348459440185281075090561932409044150848563190e-7,
        -0.3159592541226325729252114041404932172476825093241571022685558030e-6,
        0.6479345480485067400604268470413179205856053951764350285488774818e-5,
        -0.1195640987219310834630997134850124765339230561789599559118469027e-3,
        0.1878303048821821104213841688772755214421718592578708928069060912e-2,
        -0.2572634276609983812549374320149446086487394841752315971991333795e-1,
        0.2530013013837696018076453023459406710228747813264849235890169565e0,
        -0.2059367925298157081333743043961523110589638474477639670763918819e1
    ]
    #if arch(i386) || arch(x86_64)
    let datal: Array<Float80> = [
        0.1754548260022958923959603369577968267462845423320418756267262802e-35,
        -0.4608364598176219718151206437347455341103981295742782057250209733e-33,
        0.7079054045963260779141640330636872304102851676801983557312694876e-31,
        -0.7781631899528993387006875708203509838506301245699222425345556459e-29,
        0.6804297867815841183329652889601631030481806580503377730882599600e-27,
        -0.4965605835195042413496366563593034829779242702384290824681445749e-25,
        0.3130291114221916384273307743194354318767438792905507152466661838e-23,
        -0.1740275932414278002619513247798749597906384645319782594318398236e-21,
        0.8669230088497365390159728088188150944248001815877397624099132185e-20,
        -0.3911625416050804238354112382963341084823051510711870768179902620e-18,
        0.1611172692006925013670813914974406751815280495207733753460419987e-16,
        -0.6093411480425712875171729893334649078211675370998439760662846572e-15,
        0.2121775003403032437753105067165702721358577107033820261162982540e-13,
        -0.6821560506321979966173076246059046768816094011635155524484159723e-12,
        0.2021060336521718732176665128650804990733287058577029559997896279e-10,
        -0.5523392831905661048521595556152534012397802439827377264015848814e-9,
        0.1380850457931831006348459440185281075090561932409044150848563190e-7,
        -0.3159592541226325729252114041404932172476825093241571022685558030e-6,
        0.6479345480485067400604268470413179205856053951764350285488774818e-5,
        -0.1195640987219310834630997134850124765339230561789599559118469027e-3,
        0.1878303048821821104213841688772755214421718592578708928069060912e-2,
        -0.2572634276609983812549374320149446086487394841752315971991333795e-1,
        0.2530013013837696018076453023459406710228747813264849235890169565e0,
        -0.2059367925298157081333743043961523110589638474477639670763918819e1
    ]
    #endif
    switch T.self {
    case is Float.Type:
        let result = dataf as Array<Float>
        return result as! Array<T>
    case is Double.Type:
        let result = datad as Array<Double>
        return result as! Array<T>
        //        return BI0Double as! Array<FPT>
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = datal as Array<Float80>
        return result as! Array<T>
        #endif
    default:
        return datad as! Array<T>
    }
}


fileprivate func ak<T: SSFloatingPoint>(k: T, v: T) -> T {
    if k < 0 || v < 0 {
        fatalError()
    }
    if Helpers.integerPart(k) != k || Helpers.integerPart(v) != v {
        fatalError()
    }
    let sign: T = SSMath.pow1(-T.one, k + T.one)
    let tp: T = SSMath.pow1(SSMath.pow1(2, k + 1), 2)
    let g: T = SSMath.pow1(SSMath.tgamma1(k + T.half), 2)
    let ik: Int = Helpers.integerValue(k)
    let lkf: T = SSMath.logFactorial(ik)
    let kf:T = SSMath.exp1(lkf)
    let d: T = 4 * T.pi * kf * SSMath.pow1(8, k)
    let ans: T = (sign * tp * g) / d
    return ans
}
