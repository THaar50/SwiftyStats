// MARK: NOCCENTRAL T DIST
PDF
/* ORIGINAL AUTHOR
*    Claus EkstrÃ¶m, ekstrom@dina.kvl.dk
*    July 15, 2003.
* Swift Version:
*    Volker Thieme
*    June 21, 2018
*
*    Copyright (C) 2003-2015 The R Foundation
*
* DESCRIPTION
*
*    From Johnson, Kotz and Balakrishnan (1995) [2nd ed.; formula (31.15), p.516],
*    the non-central t density is
*
*      f(x, df, ncp) =
*
*        exp(-.5*ncp^2) * gamma((df+1)/2) / (sqrt(pi*df)* gamma(df/2)) * (df/(df+x^2))^((df+1)/2) *
*          sum_{j=0}^Inf  gamma((df+j+1)/2)/(factorial(j)* gamma((df+1)/2)) * (x*ncp*sqrt(2)/sqrt(df+x^2))^ j
*
*
*    The functional relationship
*
*       f(x, df, ncp) = df/x *
*                  (F(sqrt((df+2)/df)*x, df+2, ncp) - F(x, df, ncp))
*
*    is used to evaluate the density at x != 0 and
*
*       f(0, df, ncp) = exp(-.5*ncp^2) /
*                (sqrt(pi)*sqrt(df)*gamma(df/2))*gamma((df+1)/2)
*
*    is used for x=0.
*
*    All calculations are done on log-scale to increase stability.
*
* FIXME: pnt() is known to be inaccurate in the (very) left tail and for ncp > 38
*       ==> use a direct log-space summation formula in that case
*/

/* R Studio */
//    if df <= 0 {
//        #if os(macOS) || os(iOS)
//        if #available(macOS 10.12, iOS 10, *) {
//            os_log("Degrees of freedom are expected to be > 0", log: log_stat, type: .error)
//        }
//        #endif
//        throw SSSwiftyStatsError.init(type: .functionNotDefinedInDomainProvided, file: #file, line: #line, function: #function)
//    }
//    if x.isNaN || df.isNaN || lambda.isNaN {
//        return FPT.nan
//    }
//    if lambda.isZero {
//        do {
//            return try pdfStudentTDist(t: x, degreesOfFreedom: df)
//        }
//        catch {
//            throw error
//        }
//    }
//    if x.isInfinite {
//        return 0
//    }
//
//    /* R STUDIO */
//    if df >= makeFP(1E8) || df.isInfinite {
//        do {
//            return try pdfNormalDist(x: x, mean: lambda, standardDeviation: 1)
//        }
//        catch {
//            throw error
//        }
//    }
//    var u: FPT = 0
//    if abs(x) > (df * FPT.ulpOfOne).squareRoot() {
//        do {
//            let p1: Float80 = try cdfStudentTDist(t: makeFP(x) * sqrt((makeFP(df) + 2) / makeFP(df)), degreesOfFreedom: makeFP(df) + 2, nonCentralityPara: makeFP(lambda))
//            let p2: Float80 = try cdfStudentTDist(t: makeFP(x), degreesOfFreedom: makeFP(df), nonCentralityPara: makeFP(lambda))
//            let diff: Float80 = abs(p1 - p2)
//            let u1: Float80 = log1(makeFP(df)) - log1(abs(makeFP(x))) + log1(diff)
//            u = makeFP(u1)
//        }
//        catch {
//            throw error
//        }
//    }
//    else {
//        let u1: FPT = lgamma1((df + 1) / 2)
//        let u2: FPT = lgamma1(df / 2)
//        let lambdaSq: FPT = lambda * lambda
//        let u3: FPT = FPT.half * (log1(df) + lambdaSq)
//        u =  u1 - u2 - ( FPT.lnsqrtpi + u3)
//    }
//    return (rlog ? u : exp1(u))

/// https://www.boost.org/doc/libs/1_54_0/libs/math/doc/html/math_toolkit/dist_ref/dists/nc_t_dist.html
/* BOOOST
let ex1: FPT =  pow1(df, df / 2) * tgamma1(df + 1) * exp1(-pow1(lambda, 2) / 2)
let ex2: FPT = pow1(2, df) * pow1(df + pow1(x, 2), df / 2)
let ex21: FPT = ex2 * tgamma1(df / 2)
let F1: FPT = ex1 / ex21

let F2: FPT = FPT.sqrt2 * lambda * x

let a1: FPT = df / 2 + 1
let b1: FPT = makeFP(1.5)
let hx11: FPT = pow1(lambda, 2) * pow1(x, 2)
let hx12: FPT = 2 * (df * pow1(x, 2))
let hx1: FPT = hx11 / hx12

let ex3: FPT = log1(hypergeometric1F1(a: a1, b: b1, x: hx1))



let ex41: FPT = log1(df + pow1(x, 2))
let ex42: FPT = lgamma1((df + 1) / 2)
let ex4: FPT = exp1(ex41 + ex42)

let S1: FPT = ex3 / ex4

let a2: FPT = (df + 1) / 2
let b2: FPT = FPT.half
let hx2: FPT = hx1
let ex5 = hypergeometric1F1(a: a2, b: b2, x: hx2)
let ex6 = sqrt(df + pow1(x, 2)) * tgamma1(df / 2 + 1)

let S2 = ex5 / ex6

let result: FPT = F1 * (F2 * S1 + S2)
return result
*/

1.000000000000000174663301566235273169114298596655296044863
5716.40018827434137913574603541678950268182152639338956502413
-14815.304267684139090440730520001297878635061606191169835497
14291.49277657478554025109601166668467233791529471252362841
-6348.1602176414588132894549444149405809417464492117784327
1301.608286058321874104705153414892709234548806679657022
-108.176705351436963467921849912127524771089705060210549
2.60569650561175582772877838762204349658688810935420
-0.00742345251020141615152744454168796537743181965179
5.3841364325095640629609989548394710280456515E-08
-4.023533141268236372067336292793309572171534E-9
